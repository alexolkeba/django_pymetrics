# Generated by Django 5.0.1 on 2025-07-28 23:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('games', '0002_alter_gameresult_game_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='gameresult',
            name='accuracy_data',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='behavioral_events',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='confidence_scores',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='data_completeness',
            field=models.FloatField(default=0.0, help_text='Percentage of expected data collected'),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='data_quality_score',
            field=models.FloatField(default=0.0, help_text='Quality assessment of collected data'),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='difficulty_adjustments',
            field=models.JSONField(default=list, help_text='History of difficulty adjustments'),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='difficulty_level',
            field=models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='learning_curves',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='performance_metrics',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='trait_measurements',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='gameresult',
            name='validation_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='adaptive_difficulty_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='completion_rate',
            field=models.FloatField(default=0.0, help_text='Percentage of games completed'),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='data_quality_score',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='difficulty_level',
            field=models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='engagement_score',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='overall_performance_score',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='session_duration_ms',
            field=models.IntegerField(default=0, help_text='Total session duration in milliseconds'),
        ),
        migrations.AddField(
            model_name='gamesession',
            name='total_games_played',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='gameresult',
            name='game_type',
            field=models.CharField(choices=[('balloon_risk', 'Balloon Risk Game'), ('memory_cards', 'Memory Cards Game'), ('reaction_timer', 'Reaction Timer Game'), ('sorting_task', 'Sorting Task Game'), ('pattern_completion', 'Pattern Completion Game'), ('stroop_test', 'Stroop Test Game'), ('tower_of_hanoi', 'Tower of Hanoi Game'), ('emotional_faces', 'Emotional Faces Game'), ('trust_game', 'Trust Game'), ('stop_signal', 'Stop Signal Game'), ('digit_span', 'Digit Span Game'), ('fairness_game', 'Fairness Game'), ('money_exchange_1', 'Money Exchange Game #1'), ('money_exchange_2', 'Money Exchange Game #2'), ('easy_or_hard', 'Easy or Hard Game'), ('cards_game', 'Cards Game (Iowa Gambling)'), ('arrows_game', 'Arrows Game'), ('lengths_game', 'Lengths Game'), ('keypresses', 'Keypresses Game'), ('faces_game', 'Faces Game'), ('letters', 'Letters Game (N-back)'), ('magnitudes', 'Magnitudes Game'), ('sequences', 'Sequences Game'), ('shapes', 'Shapes Game')], max_length=50),
        ),
        migrations.CreateModel(
            name='BehavioralEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('user_action', 'User Action'), ('system_event', 'System Event'), ('performance_metric', 'Performance Metric'), ('learning_event', 'Learning Event'), ('emotional_response', 'Emotional Response'), ('decision_point', 'Decision Point')], max_length=20)),
                ('event_name', models.CharField(max_length=100)),
                ('timestamp_ms', models.BigIntegerField()),
                ('event_data', models.JSONField(default=dict)),
                ('context_data', models.JSONField(default=dict)),
                ('reaction_time', models.FloatField(blank=True, null=True)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('confidence', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.gameresult')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DynamicDifficultyConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_type', models.CharField(choices=[('balloon_risk', 'Balloon Risk Game'), ('memory_cards', 'Memory Cards Game'), ('reaction_timer', 'Reaction Timer Game'), ('sorting_task', 'Sorting Task Game'), ('pattern_completion', 'Pattern Completion Game'), ('stroop_test', 'Stroop Test Game'), ('tower_of_hanoi', 'Tower of Hanoi Game'), ('emotional_faces', 'Emotional Faces Game'), ('trust_game', 'Trust Game'), ('stop_signal', 'Stop Signal Game'), ('digit_span', 'Digit Span Game'), ('fairness_game', 'Fairness Game'), ('money_exchange_1', 'Money Exchange Game #1'), ('money_exchange_2', 'Money Exchange Game #2'), ('easy_or_hard', 'Easy or Hard Game'), ('cards_game', 'Cards Game (Iowa Gambling)'), ('arrows_game', 'Arrows Game'), ('lengths_game', 'Lengths Game'), ('keypresses', 'Keypresses Game'), ('faces_game', 'Faces Game'), ('letters', 'Letters Game (N-back)'), ('magnitudes', 'Magnitudes Game'), ('sequences', 'Sequences Game'), ('shapes', 'Shapes Game')], max_length=50)),
                ('current_difficulty', models.CharField(default='medium', max_length=20)),
                ('performance_threshold', models.FloatField(default=0.7)),
                ('adaptation_rate', models.FloatField(default=0.1)),
                ('recent_scores', models.JSONField(default=list)),
                ('performance_trend', models.FloatField(default=0.0)),
                ('difficulty_history', models.JSONField(default=list)),
                ('adaptation_reasons', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('game_type', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TraitMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trait_dimension', models.CharField(choices=[('emotion', 'Emotion'), ('attention', 'Attention'), ('effort', 'Effort'), ('fairness', 'Fairness'), ('focus', 'Focus'), ('decision_making', 'Decision Making'), ('learning', 'Learning'), ('generosity', 'Generosity'), ('risk_tolerance', 'Risk Tolerance')], max_length=20)),
                ('trait_name', models.CharField(max_length=100)),
                ('raw_score', models.FloatField()),
                ('normalized_score', models.FloatField()),
                ('confidence_interval', models.JSONField(default=dict)),
                ('reliability_coefficient', models.FloatField(default=0.0)),
                ('validity_evidence', models.TextField(blank=True)),
                ('measurement_method', models.CharField(max_length=100)),
                ('data_points_used', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.gameresult')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('session', 'game_result', 'trait_name')},
            },
        ),
    ]
