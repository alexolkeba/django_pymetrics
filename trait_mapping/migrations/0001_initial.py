# Generated by Django 5.0.1 on 2025-07-28 23:29

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TraitDimension',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('emotion', 'Emotion'), ('attention', 'Attention'), ('effort', 'Effort'), ('fairness', 'Fairness'), ('focus', 'Focus'), ('decision_making', 'Decision Making'), ('learning', 'Learning'), ('generosity', 'Generosity'), ('risk_tolerance', 'Risk Tolerance')], max_length=20, unique=True)),
                ('description', models.TextField(help_text='Description of the trait dimension')),
                ('scientific_basis', models.TextField(help_text='Scientific basis for this dimension')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'trait_dimensions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TraitDefinition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description of the trait')),
                ('scientific_basis', models.TextField(help_text='Scientific basis for this trait')),
                ('measurement_method', models.CharField(help_text='Method used to measure this trait', max_length=200)),
                ('reliability_coefficient', models.FloatField(help_text='Reliability coefficient for this trait')),
                ('validity_evidence', models.TextField(help_text='Evidence of validity for this trait')),
                ('source_games', models.JSONField(default=list, help_text='Games that measure this trait')),
                ('metrics_used', models.JSONField(default=list, help_text='Metrics used to calculate this trait')),
                ('normalization_method', models.CharField(help_text='Normalization method used', max_length=50)),
                ('confidence_threshold', models.FloatField(help_text='Confidence threshold for this trait')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this trait is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dimension', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traits', to='trait_mapping.traitdimension')),
            ],
            options={
                'db_table': 'trait_definitions',
                'ordering': ['dimension', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TraitMappingConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Configuration name', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description of this configuration')),
                ('trait_weights', models.JSONField(default=dict, help_text='Weights for different traits')),
                ('normalization_settings', models.JSONField(default=dict, help_text='Normalization settings')),
                ('confidence_thresholds', models.JSONField(default=dict, help_text='Confidence thresholds')),
                ('version', models.CharField(default='1.0', help_text='Configuration version', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'trait_mapping_configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TraitMeasurement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(help_text='Session ID for this measurement', max_length=64)),
                ('game_type', models.CharField(help_text='Game type that generated this measurement', max_length=50)),
                ('raw_score', models.FloatField(help_text='Raw score before normalization')),
                ('normalized_score', models.FloatField(help_text='Normalized score (0-1 scale)')),
                ('confidence_interval', models.JSONField(default=dict, help_text='Confidence interval bounds')),
                ('reliability_coefficient', models.FloatField(help_text='Reliability coefficient for this measurement')),
                ('validity_evidence', models.TextField(blank=True, help_text='Evidence of validity')),
                ('measurement_method', models.CharField(help_text='Method used for measurement', max_length=100)),
                ('data_points_used', models.IntegerField(default=0, help_text='Number of data points used')),
                ('calculation_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('trait_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='trait_mapping.traitdefinition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_measurements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'trait_measurements',
                'ordering': ['-calculation_timestamp'],
                'indexes': [models.Index(fields=['user', 'trait_definition'], name='trait_measu_user_id_ce2217_idx'), models.Index(fields=['session_id', 'game_type'], name='trait_measu_session_918942_idx'), models.Index(fields=['calculation_timestamp'], name='trait_measu_calcula_1b50a3_idx')],
            },
        ),
        migrations.CreateModel(
            name='TraitProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(help_text='Session ID for this profile', max_length=64, unique=True)),
                ('trait_scores', models.JSONField(default=dict, help_text='All trait scores for this profile')),
                ('dimension_scores', models.JSONField(default=dict, help_text='Dimension-level scores')),
                ('confidence_scores', models.JSONField(default=dict, help_text='Confidence scores for each trait')),
                ('overall_confidence', models.FloatField(help_text='Overall confidence in the profile')),
                ('data_completeness', models.FloatField(help_text='Percentage of data completeness')),
                ('quality_score', models.FloatField(help_text='Overall quality score')),
                ('calculation_method', models.CharField(help_text='Method used for calculation', max_length=100)),
                ('traits_measured', models.IntegerField(default=0, help_text='Number of traits measured')),
                ('total_data_points', models.IntegerField(default=0, help_text='Total data points used')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'trait_mapping_profiles',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'session_id'], name='trait_mappi_user_id_9e8367_idx'), models.Index(fields=['created_at'], name='trait_mappi_created_3d013e_idx')],
            },
        ),
    ]
