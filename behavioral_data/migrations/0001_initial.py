# Generated by Django 5.0.1 on 2025-07-27 20:48

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BehavioralSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(max_length=64, unique=True)),
                ('device_info', models.JSONField(default=dict, help_text='Device and browser information')),
                ('session_start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('session_end_time', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('total_games_played', models.IntegerField(default=0)),
                ('total_duration', models.IntegerField(default=0, help_text='Total session duration in milliseconds')),
                ('data_anonymized', models.BooleanField(default=False)),
                ('consent_given', models.BooleanField(default=False)),
                ('data_retention_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behavioral_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'behavioral_sessions',
                'ordering': ['-session_start_time'],
            },
        ),
        migrations.CreateModel(
            name='BehavioralMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(choices=[('session_level', 'Session Level'), ('game_level', 'Game Level'), ('trial_level', 'Trial Level'), ('user_level', 'User Level')], max_length=32)),
                ('metric_name', models.CharField(help_text="Metric name (e.g., 'avg_pumps_per_balloon')", max_length=128)),
                ('game_type', models.CharField(blank=True, max_length=64, null=True)),
                ('metric_value', models.FloatField(help_text='Calculated metric value')),
                ('metric_unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=32, null=True)),
                ('sample_size', models.IntegerField(blank=True, help_text='Number of samples used', null=True)),
                ('standard_error', models.FloatField(blank=True, help_text='Standard error of the metric', null=True)),
                ('confidence_interval', models.JSONField(blank=True, help_text='Confidence interval bounds', null=True)),
                ('calculation_method', models.CharField(help_text='Method used for calculation', max_length=128)),
                ('calculation_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_version', models.CharField(default='1.0', help_text='Data schema version', max_length=32)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='behavioral_data.behavioralsession')),
            ],
            options={
                'db_table': 'behavioral_metrics',
                'ordering': ['-calculation_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BehavioralEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('session_start', 'Session Start'), ('session_end', 'Session End'), ('game_start', 'Game Start'), ('game_end', 'Game End'), ('user_action', 'User Action'), ('system_event', 'System Event'), ('error_event', 'Error Event'), ('focus_event', 'Focus/Blur Event')], max_length=32)),
                ('event_name', models.CharField(help_text="Specific event name (e.g., 'pump', 'cash_out')", max_length=128)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('timestamp_milliseconds', models.IntegerField(help_text='Millisecond precision timestamp')),
                ('event_data', models.JSONField(default=dict, help_text='Event-specific data')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in milliseconds', null=True)),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid')], default='pending', max_length=32)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='behavioral_data.behavioralsession')),
            ],
            options={
                'db_table': 'behavioral_events',
                'ordering': ['timestamp', 'timestamp_milliseconds'],
            },
        ),
        migrations.CreateModel(
            name='BalloonRiskEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('balloon_start', 'Balloon Start'), ('balloon_end', 'Balloon End'), ('pump', 'Pump'), ('cash_out', 'Cash Out'), ('pop', 'Pop'), ('focus', 'Focus/Blur'), ('error', 'Error')], max_length=32)),
                ('balloon_id', models.CharField(blank=True, max_length=64, null=True)),
                ('balloon_index', models.IntegerField(blank=True, null=True)),
                ('balloon_color', models.CharField(blank=True, max_length=32, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('timestamp_milliseconds', models.IntegerField(help_text='Millisecond precision timestamp')),
                ('pump_number', models.IntegerField(blank=True, help_text='Nth pump for this balloon', null=True)),
                ('time_since_prev_pump', models.FloatField(blank=True, help_text='Time since previous pump in milliseconds', null=True)),
                ('balloon_size', models.FloatField(blank=True, help_text='Balloon size at pump', null=True)),
                ('current_earnings', models.FloatField(blank=True, help_text='Earnings for current balloon', null=True)),
                ('total_earnings', models.FloatField(blank=True, help_text='Total session earnings', null=True)),
                ('outcome', models.CharField(blank=True, choices=[('popped', 'Popped'), ('cashed', 'Cashed Out'), ('ongoing', 'Ongoing')], max_length=16, null=True)),
                ('earnings_lost', models.FloatField(blank=True, help_text='Earnings lost if popped', null=True)),
                ('is_new_personal_max', models.BooleanField(blank=True, help_text='Pumped to new personal max', null=True)),
                ('is_rapid_pump', models.BooleanField(blank=True, help_text='Rapid pump based on interval', null=True)),
                ('hesitation_time', models.FloatField(blank=True, help_text='Hesitation time before action', null=True)),
                ('device_info', models.JSONField(default=dict, help_text='Device context at event')),
                ('user_context', models.JSONField(default=dict, help_text='User context and state')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balloon_events', to='behavioral_data.behavioralsession')),
            ],
            options={
                'db_table': 'balloon_risk_events',
                'ordering': ['timestamp', 'timestamp_milliseconds'],
            },
        ),
        migrations.CreateModel(
            name='MemoryCardsEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('card_flip', 'Card Flip'), ('card_match', 'Card Match'), ('card_mismatch', 'Card Mismatch'), ('round_start', 'Round Start'), ('round_end', 'Round End'), ('game_start', 'Game Start'), ('game_end', 'Game End')], max_length=32)),
                ('card_id', models.CharField(blank=True, max_length=64, null=True)),
                ('card_position', models.IntegerField(blank=True, null=True)),
                ('card_value', models.CharField(blank=True, max_length=32, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('timestamp_milliseconds', models.IntegerField(help_text='Millisecond precision timestamp')),
                ('reaction_time', models.FloatField(blank=True, help_text='Reaction time in milliseconds', null=True)),
                ('round_number', models.IntegerField(blank=True, null=True)),
                ('cards_flipped', models.IntegerField(default=0, help_text='Number of cards flipped in current round')),
                ('matches_found', models.IntegerField(default=0, help_text='Total matches found')),
                ('is_correct_match', models.BooleanField(blank=True, null=True)),
                ('memory_accuracy', models.FloatField(blank=True, help_text='Memory accuracy percentage', null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_events', to='behavioral_data.behavioralsession')),
            ],
            options={
                'db_table': 'memory_cards_events',
                'ordering': ['timestamp', 'timestamp_milliseconds'],
            },
        ),
        migrations.CreateModel(
            name='ReactionTimerEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('stimulus_present', 'Stimulus Present'), ('user_response', 'User Response'), ('trial_start', 'Trial Start'), ('trial_end', 'Trial End'), ('block_start', 'Block Start'), ('block_end', 'Block End')], max_length=32)),
                ('trial_number', models.IntegerField(blank=True, null=True)),
                ('block_number', models.IntegerField(blank=True, null=True)),
                ('stimulus_type', models.CharField(blank=True, max_length=32, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('timestamp_milliseconds', models.IntegerField(help_text='Millisecond precision timestamp')),
                ('stimulus_time', models.FloatField(blank=True, help_text='Stimulus presentation time', null=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('accuracy', models.FloatField(blank=True, help_text='Response accuracy', null=True)),
                ('stimulus_data', models.JSONField(default=dict, help_text='Stimulus-specific data')),
                ('response_data', models.JSONField(default=dict, help_text='Response-specific data')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reaction_events', to='behavioral_data.behavioralsession')),
            ],
            options={
                'db_table': 'reaction_timer_events',
                'ordering': ['timestamp', 'timestamp_milliseconds'],
            },
        ),
        migrations.AddIndex(
            model_name='behavioralsession',
            index=models.Index(fields=['user', 'session_start_time'], name='behavioral__user_id_4441ad_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralsession',
            index=models.Index(fields=['session_id'], name='behavioral__session_4bb6c4_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralsession',
            index=models.Index(fields=['is_completed'], name='behavioral__is_comp_72c7dd_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralmetric',
            index=models.Index(fields=['session', 'metric_type', 'metric_name'], name='behavioral__session_9466a3_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralmetric',
            index=models.Index(fields=['game_type', 'metric_name'], name='behavioral__game_ty_23a0f4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='behavioralmetric',
            unique_together={('session', 'metric_name', 'game_type')},
        ),
        migrations.AddIndex(
            model_name='behavioralevent',
            index=models.Index(fields=['session', 'event_type', 'timestamp'], name='behavioral__session_c8943d_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='behavioral__event_t_34bcc1_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralevent',
            index=models.Index(fields=['validation_status'], name='behavioral__validat_a2ff35_idx'),
        ),
        migrations.AddIndex(
            model_name='balloonriskevent',
            index=models.Index(fields=['session', 'balloon_id', 'event_type'], name='balloon_ris_session_33b828_idx'),
        ),
        migrations.AddIndex(
            model_name='balloonriskevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='balloon_ris_event_t_5ee779_idx'),
        ),
        migrations.AddIndex(
            model_name='balloonriskevent',
            index=models.Index(fields=['balloon_index', 'pump_number'], name='balloon_ris_balloon_099a1f_idx'),
        ),
        migrations.AddIndex(
            model_name='memorycardsevent',
            index=models.Index(fields=['session', 'event_type', 'timestamp'], name='memory_card_session_5d3296_idx'),
        ),
        migrations.AddIndex(
            model_name='memorycardsevent',
            index=models.Index(fields=['card_id', 'round_number'], name='memory_card_card_id_3b89fb_idx'),
        ),
        migrations.AddIndex(
            model_name='reactiontimerevent',
            index=models.Index(fields=['session', 'event_type', 'timestamp'], name='reaction_ti_session_1ec7c2_idx'),
        ),
        migrations.AddIndex(
            model_name='reactiontimerevent',
            index=models.Index(fields=['trial_number', 'block_number'], name='reaction_ti_trial_n_95334e_idx'),
        ),
    ]
