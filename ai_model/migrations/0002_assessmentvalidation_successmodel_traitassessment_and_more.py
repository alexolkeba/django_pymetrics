# Generated by Django 5.0.1 on 2025-07-27 20:48

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_model', '0001_initial'),
        ('games', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentValidation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_completeness', models.FloatField(help_text='Percentage of required data collected', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('data_quality_score', models.FloatField(help_text='Overall data quality score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assessment_reliability', models.FloatField(help_text='Reliability score of assessment', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('has_sufficient_data', models.BooleanField(default=False, help_text='Whether sufficient data was collected')),
                ('meets_quality_threshold', models.BooleanField(default=False, help_text='Whether quality threshold was met')),
                ('is_scientifically_valid', models.BooleanField(default=False, help_text='Whether assessment is scientifically valid')),
                ('validation_notes', models.TextField(blank=True, help_text='Notes about validation process')),
                ('quality_issues', models.JSONField(default=list, help_text='List of quality issues found')),
                ('validation_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'assessment_validations',
                'ordering': ['-validation_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SuccessModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the success model', max_length=128, unique=True)),
                ('role_title', models.CharField(help_text='Job role title', max_length=128)),
                ('organization', models.CharField(help_text='Organization name', max_length=128)),
                ('risk_tolerance_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('working_memory_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attention_control_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('decision_speed_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('learning_agility_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('emotional_regulation_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('social_perception_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('trust_tendency_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fairness_perception_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('persistence_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('adaptability_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('consistency_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('impulsivity_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('trait_weights', models.JSONField(default=dict, help_text='Weights for different traits in matching')),
                ('match_thresholds', models.JSONField(default=dict, help_text='Thresholds for recommendation bands')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this model is currently active')),
                ('version', models.CharField(default='1.0', help_text='Model version', max_length=32)),
            ],
            options={
                'db_table': 'success_models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TraitAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('game_type', models.CharField(help_text='Type of game assessed', max_length=64)),
                ('component_name', models.CharField(help_text='Specific component or metric assessed', max_length=128)),
                ('trait_value', models.FloatField(help_text='Calculated trait value')),
                ('confidence_interval', models.JSONField(default=dict, help_text='Confidence interval bounds')),
                ('sample_size', models.IntegerField(help_text='Number of data points used')),
                ('assessment_method', models.CharField(help_text='Method used for assessment', max_length=128)),
                ('assessment_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_version', models.CharField(default='1.0', help_text='Data schema version', max_length=32)),
            ],
            options={
                'db_table': 'trait_assessments',
                'ordering': ['-assessment_timestamp'],
            },
        ),
        migrations.AlterModelOptions(
            name='traitprofile',
            options={'ordering': ['-calculation_timestamp']},
        ),
        migrations.RemoveField(
            model_name='traitprofile',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='traitprofile',
            name='recommendation',
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='adaptability',
            field=models.FloatField(blank=True, help_text='Adaptability to change (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='assessment_notes',
            field=models.TextField(blank=True, help_text='Notes about the assessment process'),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='assessment_version',
            field=models.CharField(default='1.0', help_text='Version of assessment algorithm used', max_length=32),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='calculation_timestamp',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='When trait profile was calculated'),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='confidence_level',
            field=models.FloatField(blank=True, help_text='Confidence in trait assessment (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='consistency',
            field=models.FloatField(blank=True, help_text='Behavioral consistency (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='data_schema_version',
            field=models.CharField(default='1.0', help_text='Version of data schema used', max_length=32),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='emotional_regulation',
            field=models.FloatField(blank=True, help_text='Emotional regulation ability (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='fairness_perception',
            field=models.FloatField(blank=True, help_text='Fairness perception and judgment (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='impulsivity',
            field=models.FloatField(blank=True, help_text='Impulsivity level (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='persistence',
            field=models.FloatField(blank=True, help_text='Persistence and grit (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='recommendation_band',
            field=models.CharField(blank=True, choices=[('highly_recommend', 'Highly Recommend'), ('recommend', 'Recommend'), ('do_not_recommend', 'Do Not Recommend'), ('borderline', 'Borderline')], help_text='Recommendation based on success model comparison', max_length=32),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='social_perception',
            field=models.FloatField(blank=True, help_text='Social perception and empathy (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='success_model_match',
            field=models.FloatField(blank=True, help_text='Match score with success model (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='trust_tendency',
            field=models.FloatField(blank=True, help_text='Tendency to trust others (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='traitprofile',
            name='validation_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('validated', 'Validated'), ('flagged', 'Flagged for Review'), ('invalid', 'Invalid')], default='pending', help_text='Validation status of trait profile', max_length=32),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='attention_control',
            field=models.FloatField(blank=True, help_text='Attention control ability (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='decision_speed',
            field=models.FloatField(blank=True, help_text='Decision-making speed (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='learning_agility',
            field=models.FloatField(blank=True, help_text='Learning and adaptation ability (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='risk_tolerance',
            field=models.FloatField(blank=True, help_text='Risk tolerance score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='traitprofile',
            name='working_memory',
            field=models.FloatField(blank=True, help_text='Working memory capacity (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddIndex(
            model_name='traitprofile',
            index=models.Index(fields=['session', 'recommendation_band'], name='trait_profi_session_7fbcbd_idx'),
        ),
        migrations.AddIndex(
            model_name='traitprofile',
            index=models.Index(fields=['success_model_match', 'confidence_level'], name='trait_profi_success_73a236_idx'),
        ),
        migrations.AddIndex(
            model_name='traitprofile',
            index=models.Index(fields=['validation_status'], name='trait_profi_validat_b0f4e4_idx'),
        ),
        migrations.AlterModelTable(
            name='traitprofile',
            table='trait_profiles',
        ),
        migrations.AddField(
            model_name='assessmentvalidation',
            name='trait_profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='validation', to='ai_model.traitprofile'),
        ),
        migrations.AddField(
            model_name='assessmentvalidation',
            name='validated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validated_assessments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='successmodel',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_success_models', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='traitassessment',
            name='trait_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='ai_model.traitprofile'),
        ),
        migrations.AddIndex(
            model_name='assessmentvalidation',
            index=models.Index(fields=['has_sufficient_data', 'meets_quality_threshold'], name='assessment__has_suf_7d414e_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentvalidation',
            index=models.Index(fields=['is_scientifically_valid'], name='assessment__is_scie_da0123_idx'),
        ),
        migrations.AddIndex(
            model_name='successmodel',
            index=models.Index(fields=['role_title', 'organization'], name='success_mod_role_ti_96aaa0_idx'),
        ),
        migrations.AddIndex(
            model_name='successmodel',
            index=models.Index(fields=['is_active'], name='success_mod_is_acti_fb4366_idx'),
        ),
        migrations.AddIndex(
            model_name='traitassessment',
            index=models.Index(fields=['trait_profile', 'game_type'], name='trait_asses_trait_p_37ee4e_idx'),
        ),
        migrations.AddIndex(
            model_name='traitassessment',
            index=models.Index(fields=['component_name'], name='trait_asses_compone_362211_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='traitassessment',
            unique_together={('trait_profile', 'game_type', 'component_name')},
        ),
    ]
